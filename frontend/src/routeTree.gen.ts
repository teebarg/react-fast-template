/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ProfileImport } from "./routes/profile";
import { Route as AuthImport } from "./routes/_auth";
import { Route as AdminImport } from "./routes/_admin";
import { Route as AdminAdminUsersImport } from "./routes/_admin/admin.users";
import { Route as AdminAdminUserUseridImport } from "./routes/_admin/admin.user.$userid";

// Create Virtual Routes

const SettingsLazyImport = createFileRoute("/settings")();
const AboutLazyImport = createFileRoute("/about")();
const TboLazyImport = createFileRoute("/_tbo")();
const IndexLazyImport = createFileRoute("/")();
const AuthSignupLazyImport = createFileRoute("/_auth/signup")();
const AuthLoginLazyImport = createFileRoute("/_auth/login")();
const TboTboIndexLazyImport = createFileRoute("/_tbo/tbo/")();
const PlaygroundPlaygroundIndexLazyImport = createFileRoute("/_playground/playground/")();
const AdminAdminIndexLazyImport = createFileRoute("/_admin/admin/")();
const TboTboProductLazyImport = createFileRoute("/_tbo/tbo/product")();
const TboTboCollectionsLazyImport = createFileRoute("/_tbo/tbo/collections")();
const TboTboCheckoutLazyImport = createFileRoute("/_tbo/tbo/checkout")();
const AdminAdminSettingsLazyImport = createFileRoute("/_admin/admin/settings")();

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
    path: "/settings",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/settings.lazy").then((d) => d.Route));

const AboutLazyRoute = AboutLazyImport.update({
    path: "/about",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/about.lazy").then((d) => d.Route));

const TboLazyRoute = TboLazyImport.update({
    id: "/_tbo",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/_tbo.lazy").then((d) => d.Route));

const ProfileRoute = ProfileImport.update({
    path: "/profile",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/profile.lazy").then((d) => d.Route));

const AuthRoute = AuthImport.update({
    id: "/_auth",
    getParentRoute: () => rootRoute,
} as any);

const AdminRoute = AdminImport.update({
    id: "/_admin",
    getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
    path: "/",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const AuthSignupLazyRoute = AuthSignupLazyImport.update({
    path: "/signup",
    getParentRoute: () => AuthRoute,
} as any).lazy(() => import("./routes/_auth/signup.lazy").then((d) => d.Route));

const AuthLoginLazyRoute = AuthLoginLazyImport.update({
    path: "/login",
    getParentRoute: () => AuthRoute,
} as any).lazy(() => import("./routes/_auth/login.lazy").then((d) => d.Route));

const TboTboIndexLazyRoute = TboTboIndexLazyImport.update({
    path: "/tbo/",
    getParentRoute: () => TboLazyRoute,
} as any).lazy(() => import("./routes/_tbo/tbo.index.lazy").then((d) => d.Route));

const PlaygroundPlaygroundIndexLazyRoute = PlaygroundPlaygroundIndexLazyImport.update({
    path: "/playground/",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/_playground/playground.index.lazy").then((d) => d.Route));

const AdminAdminIndexLazyRoute = AdminAdminIndexLazyImport.update({
    path: "/admin/",
    getParentRoute: () => AdminRoute,
} as any).lazy(() => import("./routes/_admin/admin.index.lazy").then((d) => d.Route));

const TboTboProductLazyRoute = TboTboProductLazyImport.update({
    path: "/tbo/product",
    getParentRoute: () => TboLazyRoute,
} as any).lazy(() => import("./routes/_tbo/tbo.product.lazy").then((d) => d.Route));

const TboTboCollectionsLazyRoute = TboTboCollectionsLazyImport.update({
    path: "/tbo/collections",
    getParentRoute: () => TboLazyRoute,
} as any).lazy(() => import("./routes/_tbo/tbo.collections.lazy").then((d) => d.Route));

const TboTboCheckoutLazyRoute = TboTboCheckoutLazyImport.update({
    path: "/tbo/checkout",
    getParentRoute: () => TboLazyRoute,
} as any).lazy(() => import("./routes/_tbo/tbo.checkout.lazy").then((d) => d.Route));

const AdminAdminSettingsLazyRoute = AdminAdminSettingsLazyImport.update({
    path: "/admin/settings",
    getParentRoute: () => AdminRoute,
} as any).lazy(() => import("./routes/_admin/admin.settings.lazy").then((d) => d.Route));

const AdminAdminUsersRoute = AdminAdminUsersImport.update({
    path: "/admin/users",
    getParentRoute: () => AdminRoute,
} as any).lazy(() => import("./routes/_admin/admin.users.lazy").then((d) => d.Route));

const AdminAdminUserUseridRoute = AdminAdminUserUseridImport.update({
    path: "/admin/user/$userid",
    getParentRoute: () => AdminRoute,
} as any).lazy(() => import("./routes/_admin/admin.user.$userid.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_admin": {
            id: "/_admin";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof AdminImport;
            parentRoute: typeof rootRoute;
        };
        "/_auth": {
            id: "/_auth";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof AuthImport;
            parentRoute: typeof rootRoute;
        };
        "/profile": {
            id: "/profile";
            path: "/profile";
            fullPath: "/profile";
            preLoaderRoute: typeof ProfileImport;
            parentRoute: typeof rootRoute;
        };
        "/_tbo": {
            id: "/_tbo";
            path: "";
            fullPath: "";
            preLoaderRoute: typeof TboLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/about": {
            id: "/about";
            path: "/about";
            fullPath: "/about";
            preLoaderRoute: typeof AboutLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/settings": {
            id: "/settings";
            path: "/settings";
            fullPath: "/settings";
            preLoaderRoute: typeof SettingsLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_auth/login": {
            id: "/_auth/login";
            path: "/login";
            fullPath: "/login";
            preLoaderRoute: typeof AuthLoginLazyImport;
            parentRoute: typeof AuthImport;
        };
        "/_auth/signup": {
            id: "/_auth/signup";
            path: "/signup";
            fullPath: "/signup";
            preLoaderRoute: typeof AuthSignupLazyImport;
            parentRoute: typeof AuthImport;
        };
        "/_admin/admin/users": {
            id: "/_admin/admin/users";
            path: "/admin/users";
            fullPath: "/admin/users";
            preLoaderRoute: typeof AdminAdminUsersImport;
            parentRoute: typeof AdminImport;
        };
        "/_admin/admin/settings": {
            id: "/_admin/admin/settings";
            path: "/admin/settings";
            fullPath: "/admin/settings";
            preLoaderRoute: typeof AdminAdminSettingsLazyImport;
            parentRoute: typeof AdminImport;
        };
        "/_tbo/tbo/checkout": {
            id: "/_tbo/tbo/checkout";
            path: "/tbo/checkout";
            fullPath: "/tbo/checkout";
            preLoaderRoute: typeof TboTboCheckoutLazyImport;
            parentRoute: typeof TboLazyImport;
        };
        "/_tbo/tbo/collections": {
            id: "/_tbo/tbo/collections";
            path: "/tbo/collections";
            fullPath: "/tbo/collections";
            preLoaderRoute: typeof TboTboCollectionsLazyImport;
            parentRoute: typeof TboLazyImport;
        };
        "/_tbo/tbo/product": {
            id: "/_tbo/tbo/product";
            path: "/tbo/product";
            fullPath: "/tbo/product";
            preLoaderRoute: typeof TboTboProductLazyImport;
            parentRoute: typeof TboLazyImport;
        };
        "/_admin/admin/": {
            id: "/_admin/admin/";
            path: "/admin";
            fullPath: "/admin";
            preLoaderRoute: typeof AdminAdminIndexLazyImport;
            parentRoute: typeof AdminImport;
        };
        "/_playground/playground/": {
            id: "/_playground/playground/";
            path: "/playground";
            fullPath: "/playground";
            preLoaderRoute: typeof PlaygroundPlaygroundIndexLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_tbo/tbo/": {
            id: "/_tbo/tbo/";
            path: "/tbo";
            fullPath: "/tbo";
            preLoaderRoute: typeof TboTboIndexLazyImport;
            parentRoute: typeof TboLazyImport;
        };
        "/_admin/admin/user/$userid": {
            id: "/_admin/admin/user/$userid";
            path: "/admin/user/$userid";
            fullPath: "/admin/user/$userid";
            preLoaderRoute: typeof AdminAdminUserUseridImport;
            parentRoute: typeof AdminImport;
        };
    }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
    IndexLazyRoute,
    AdminRoute: AdminRoute.addChildren({
        AdminAdminUsersRoute,
        AdminAdminSettingsLazyRoute,
        AdminAdminIndexLazyRoute,
        AdminAdminUserUseridRoute,
    }),
    AuthRoute: AuthRoute.addChildren({ AuthLoginLazyRoute, AuthSignupLazyRoute }),
    ProfileRoute,
    TboLazyRoute: TboLazyRoute.addChildren({
        TboTboCheckoutLazyRoute,
        TboTboCollectionsLazyRoute,
        TboTboProductLazyRoute,
        TboTboIndexLazyRoute,
    }),
    AboutLazyRoute,
    SettingsLazyRoute,
    PlaygroundPlaygroundIndexLazyRoute,
});

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/_auth",
        "/profile",
        "/_tbo",
        "/about",
        "/settings",
        "/_playground/playground/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_admin": {
      "filePath": "_admin.tsx",
      "children": [
        "/_admin/admin/users",
        "/_admin/admin/settings",
        "/_admin/admin/",
        "/_admin/admin/user/$userid"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/signup"
      ]
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/_tbo": {
      "filePath": "_tbo.lazy.tsx",
      "children": [
        "/_tbo/tbo/checkout",
        "/_tbo/tbo/collections",
        "/_tbo/tbo/product",
        "/_tbo/tbo/"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/_auth/login": {
      "filePath": "_auth/login.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/signup": {
      "filePath": "_auth/signup.lazy.tsx",
      "parent": "/_auth"
    },
    "/_admin/admin/users": {
      "filePath": "_admin/admin.users.tsx",
      "parent": "/_admin"
    },
    "/_admin/admin/settings": {
      "filePath": "_admin/admin.settings.lazy.tsx",
      "parent": "/_admin"
    },
    "/_tbo/tbo/checkout": {
      "filePath": "_tbo/tbo.checkout.lazy.tsx",
      "parent": "/_tbo"
    },
    "/_tbo/tbo/collections": {
      "filePath": "_tbo/tbo.collections.lazy.tsx",
      "parent": "/_tbo"
    },
    "/_tbo/tbo/product": {
      "filePath": "_tbo/tbo.product.lazy.tsx",
      "parent": "/_tbo"
    },
    "/_admin/admin/": {
      "filePath": "_admin/admin.index.lazy.tsx",
      "parent": "/_admin"
    },
    "/_playground/playground/": {
      "filePath": "_playground/playground.index.lazy.tsx"
    },
    "/_tbo/tbo/": {
      "filePath": "_tbo/tbo.index.lazy.tsx",
      "parent": "/_tbo"
    },
    "/_admin/admin/user/$userid": {
      "filePath": "_admin/admin.user.$userid.tsx",
      "parent": "/_admin"
    }
  }
}
ROUTE_MANIFEST_END */
